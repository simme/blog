{
  "version": "https://jsonfeed.org/version/1",
  "title": "I Am Simme",
  "home_page_url": "https://iamsim.me/index.xml",
  "feed_url": "https://iamsim.me/feed.json",
  "items": [
    
    {
      "id": "https://iamsim.me/the-coordinator-pattern/",
      "url": "https://iamsim.me/the-coordinator-pattern/",
      "title": "The Coordinator Pattern",
      "date_published": "2016-07-19T17:12:42+0000",
      "content_html": "\n\n\u003cp\u003eSoroush Khanlou had a very interesting \u003ca href=\"http://khanlou.com/2015/10/coordinators-redux/\"\u003eblog post\u003c/a\u003e a while back. In it he elaborates on his \u0026ldquo;coordinator pattern\u0026rdquo;. Its a very neat pattern in which you make all of your view controllers \u0026ldquo;flow agnostic\u0026rdquo;. Ie. they know nothing about the view controller hierarchy, when to push another view controller on the navigation stack, when to present a modal etc. All of that responsibility is delegated to a coordinator object. Each view controller becomes completely isolated. If you haven\u0026rsquo;t read his post you should go ahead and do that before continuing here. It\u0026rsquo;s a great read!\u003c/p\u003e\n\n\u003cp\u003eI\u0026rsquo;m currently working on a new app for \u003ca href=\"http://filibaba.com\"\u003eFilibaba\u003c/a\u003e. When the various flows of the app started coming together I quickly realized that many of the view controllers were basically the same, but with small variations in behavior. I had started building the app using storyboards and segues and that was quickly becoming a mess.\u003c/p\u003e\n\n\u003ch2 id=\"isolation\"\u003eIsolation\u003c/h2\u003e\n\n\u003cp\u003eI took a week to pause feature development and rewrite each view controller. Instead of having direct access to the model layer each view controller now has properties and a delegate that informs the behavior. Instead of pushing a detail view controller on the stack a table view instead notifies its delegate (most likely a coordinator) that a cell was selected. The delegate then creates the detail view controller and pushes it on the stack.\u003c/p\u003e\n\n\u003cp\u003eThis means that no view controller relies on global state or is in any other way tied to the rest of the environment. So reusing them becomes incredibly easy.\u003c/p\u003e\n\n\u003ch2 id=\"enter-coordinator\"\u003eEnter Coordinator\u003c/h2\u003e\n\n\u003cp\u003eAfter doing this I was left with very pretty view controllers, but a very broken app. So I took to pen and paper to sketch out each of the flows in the app. Basically a flow chart of the entire app. Doing this I could identify areas where the same type of flow occurred. Each of these areas became their own coordinator.\u003c/p\u003e\n\n\u003cp\u003eFor example, I had a onboarding flow that was very similar to the edit flow. These became the one and same coordinator.\u003c/p\u003e\n\n\u003cp\u003eAfter having each of the flows down I started thinking about what a coordinator needed to be able to do:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eMaintain a list of child coordinators.\u003c/li\u003e\n\u003cli\u003eThey need a root view controller to start from.\u003c/li\u003e\n\u003cli\u003eThey need a reference to my storyboard to instantiate view controllers.\u003c/li\u003e\n\u003cli\u003eThey need a reference to my \u0026ldquo;application context\u0026rdquo; (an object containing database connections and settings).\u003c/li\u003e\n\u003cli\u003eStart and stop child coordinators.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eI came up with this protocol (gist, might not show up in RSS readers):\u003c/p\u003e\n\n\u003cscript src=\"https://gist.github.com/simme/ea0918d534f13ace3445e84ec043ed99.js\"\u003e\u003c/script\u003e\n\n\u003cp\u003e(To simplify things pertaining to storing of child coordinators etc I made the coordinators \u003ccode\u003eNSObject\u003c/code\u003es. Generic self constraints and what not. Would be great to get around this somehow.)\u003c/p\u003e\n\n\u003cp\u003eThe default implementation extension provides convenience methods for starting and stopping a coordinator.\u003c/p\u003e\n\n\u003ch2 id=\"usage\"\u003eUsage\u003c/h2\u003e\n\n\u003cp\u003eSo imagine you have a view controller showing a contact. The view is displaying an edit button. The view controller is managed by a \u003ccode\u003eContactsBrowsingCoordinator\u003c/code\u003e. The user taps that edit button which triggers a delegate call: \u003ccode\u003edelegate?.contactDetailViewController(contactDetailViewController: ContactDetailViewController, wantsToEditContact contact: Contact)\u003c/code\u003e\u003c/p\u003e\n\n\u003cp\u003eThe delegate of the view controller is the \u003ccode\u003eContactsBrowsingCoordinator\u003c/code\u003e. When the \u003ccode\u003ewantsToEdit\u003c/code\u003e method is called it spins off a \u003ccode\u003eEditContactCoordinator\u003c/code\u003e doing something like this:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003efunc contactDetailViewController(contactDetailViewController: ContactDetailViewController, wantsToEditContact contact: Contact) {\n  // The type of coordinator to start is inferred by the type declaration in the block.\n  startChildWith(rootViewController, callback: nil) { (coordinator: EditContactCoordinator) in\n\t\t// Your chance to set behavioral properties on the `EditContactCoordinator`, like the contact being edited.\n\t\t// This block is called _before_ the start method of the coordinator.\n\t\tcoordinator.contactToEdit = contact\n\t\t\n\t\t// This coordinator can be a delegate of the new coordinator to get notified of events. Like when the user is done. This is when this coordinator would call `stop` on the edit coordinator which would then rewind the navigation stack and return to where it kicked off.\n\t\tcoordinator.delegate = self\n  }\n}\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eIn the \u003ccode\u003estart\u003c/code\u003e method of the \u003ccode\u003eEditContactCoordinator\u003c/code\u003e we create the edit view controller and present it:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003efunc start(withCallback: CoordinatorCallback) {\n  // See: https://medium.com/swift-programming/uistoryboard-safer-with-enums-protocol-extensions-and-generics-7aad3883b44d\n  let viewController: EditContactViewController = storyboard.instantiateViewController()\n  \n  // Pass on the property we set before\n  viewController.contact = contact\n  viewController.delegate = self\n  \n  rootViewController.presentViewController(viewController, animated: true)\n}\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003ch2 id=\"recap\"\u003eRecap\u003c/h2\u003e\n\n\u003cp\u003eThis particular design has made it super simple for me to modify the various flows when we\u0026rsquo;ve made changes to ordering. It makes each view controller very simple and easy to read and reason about.\u003c/p\u003e\n\n\u003cp\u003eAll of the flows are clearly articulated in each coordinator and following along is straight forward. I don\u0026rsquo;t think I\u0026rsquo;ll ever write an app any other way.\u003c/p\u003e\n\n\u003cp\u003eSure, it\u0026rsquo;s a bit of boilerplate. For smaller apps you will end up with more code just to connect two view controllers. But I still think it\u0026rsquo;s worth it in the long run. It also helps you think about what each view controller has to be able to do when you define its delegate protocol. It is easy to see when things start to get out of hand and you might have to split things up further.\u003c/p\u003e\n\n\u003cp\u003eI implement each view controller delegate as an extension to my coordinators. This way it is easy to split it up into multiple files and find the bit of code you\u0026rsquo;re looking for.\u003c/p\u003e\n\n\u003cp\u003eMany, not all, view controllers are still defined and laid out in a storyboard. I\u0026rsquo;m just not using segues. Instead I\u0026rsquo;m using a \u003ca href=\"https://medium.com/swift-programming/uistoryboard-safer-with-enums-protocol-extensions-and-generics-7aad3883b44d\"\u003estoryboard extension\u003c/a\u003e to make view controller instantiation super simple.\u003c/p\u003e\n\n\u003cp\u003eI\u0026rsquo;d be happy to answer any questions on Twitter: \u003ca href=\"https://twitter.com/simmelj\"\u003e@simmelj\u003c/a\u003e. Or in the comments of the gist. If you have any other feedback on how one might improve the Coordinator protocol I\u0026rsquo;d be super happy, still very new to generics.\u003c/p\u003e\n"
    }, 
    {
      "id": "https://iamsim.me/uistackview---uitextview-need-constraints-for-y-position-or-height/",
      "url": "https://iamsim.me/uistackview---uitextview-need-constraints-for-y-position-or-height/",
      "title": "UIStackView + UITextView: Need constraints for Y position or height",
      "date_published": "2016-06-27T19:00:07+0000",
      "content_html": "\u003cp\u003eJust today I had to replace a \u003ccode\u003eUILabel\u003c/code\u003e with a \u003ccode\u003eUITextView\u003c/code\u003e. The label was inside of a \u003ccode\u003eUIStackView\u003c/code\u003e that had its position pinned to the bottom of another view, hence growing upwards. I\u0026rsquo;m doing all of this in Interface Builder btw. Just as I let go of the text view I\u0026rsquo;ve dragged in I see that ominous red circle with an arrow show up. Indicating that there\u0026rsquo;s some problem with my layout. I click it and I\u0026rsquo;m presented with the error:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003eLabel Stack View\nNeed constraints for: Y position or height\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eVery frustrating. It has a constraint for it\u0026rsquo;s Y position. And I want it to grow with its contents so I can\u0026rsquo;t just set a fixed height.\u003c/p\u003e\n\n\u003cp\u003eAfter much clicking around in IB it hits me: \u003ccode\u003eUITextView\u003c/code\u003e is a subclass of \u003ccode\u003eUIScrollView\u003c/code\u003e and hence its height is somewhat ambigious. Or at least there\u0026rsquo;s not any given \u0026ldquo;intrinsic content size\u0026rdquo;. Easy solution to the error was to deselect the \u003ccode\u003eEnable scrolling\u003c/code\u003e checkbox in the attributes inspector for the text view. I don\u0026rsquo;t want scrolling anyway. I\u0026rsquo;m going to use a few tricks to make the text view grow with its content anyway!\u003c/p\u003e\n"
    }, 
    {
      "id": "https://iamsim.me/swift-equatable-and-hashable/",
      "url": "https://iamsim.me/swift-equatable-and-hashable/",
      "title": "Swift Equatable and Hashable",
      "date_published": "2016-05-31T04:33:49+0000",
      "content_html": "\u003cp\u003eSwift provides a protocol that you can conform to to let the world know that your objects or structs can be compared and found equal or not: \u003ccode\u003eEquatable\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eThere\u0026rsquo;s also a protocol that allows you to use your objects as keys in a dictionary: \u003ccode\u003eHashable\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eIn an app I\u0026rsquo;m working on I\u0026rsquo;m making some of the models (\u003ccode\u003estruct\u003c/code\u003es) conform to these procotols so that I can make diffing and such when refreshing the UI. And I learned a lot very quickly about this particular topic!\u003c/p\u003e\n\n\u003cp\u003eLet\u0026rsquo;s pretend we have a struct that holds two integers:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan class=\"kd\"\u003estruct\u003c/span\u003e \u003cspan class=\"nc\"\u003eIndexPath\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003erow\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nb\"\u003eInt\u003c/span\u003e\n  \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003ecolumn\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nb\"\u003eInt\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003eNow we would like to be able to use our \u003ccode\u003eIndexPath\u003c/code\u003e as keys in a dictionary, so we conform to \u003ccode\u003eHashable\u003c/code\u003e:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan class=\"kd\"\u003eextension\u003c/span\u003e \u003cspan class=\"nc\"\u003eIndexPath\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nb\"\u003eHashable\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"c1\"\u003e// Which in turn requires us to provide the `hashValue` property\u003c/span\u003e\n  \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nv\"\u003ehashValue\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nb\"\u003eInt\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \t\u003cspan class=\"c1\"\u003e// This is what you might do if you\u0026#39;re like me and don\u0026#39;t really know what you\u0026#39;re doing:\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003erow\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ehashValue\u003c/span\u003e \u003cspan class=\"o\"\u003e|\u003c/span\u003e \u003cspan class=\"n\"\u003ecolumn\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ehashValue\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003eI was pretty sure I was doing this wrong so I took to the fantastic \u003ca href=\"http://chat.coreint.org\"\u003eCore Intuition Slack\u003c/a\u003e (Also if you\u0026rsquo;re not already subscribed to the podcast — do it know, I\u0026rsquo;ll wait!). I quickly got a few very helpful answers. First from \u003ca href=\"http://www.peerassembly.com\"\u003eDennis Hennesy\u003c/a\u003e:\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eI think \u003ccode\u003ea.hashValue ^ b.hashValue\u003c/code\u003e would be better. The problem with OR is that if one value is 11111….11111, the other value has no effect on the result.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eThat makes perfect sense. Shortly after, \u003ca href=\"https://michelf.ca/home/\"\u003eMichel Fortin\u003c/a\u003e expandend on that saying:\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eEven better would be to multiply one of the values by an arbitrary big constant value such as: \u003ccode\u003ea.hashValue ^ (b.hashValue \u0026amp;* 7197972913\u003c/code\u003e. (the \u003ccode\u003e\u0026amp;*\u003c/code\u003e operator is used so that instead of triggering an overflow it\u0026rsquo;ll just wrap around)\u003c/p\u003e\n\n\u003cp\u003eBecause otherwise all it takes with \u003ccode\u003e^\u003c/code\u003e for the hash to be zero is that \u003ccode\u003ea\u003c/code\u003e and \u003ccode\u003eb\u003c/code\u003e be equal, which could be a likely occurence (depending on your actual data of course).\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eI wrote a short test to see and surely enough \u003ccode\u003eIndexPath(row: 1, column: 1)\u003c/code\u003e did get the same hash value as \u003ccode\u003eIndexPath(row: 7, column: 7)\u003c/code\u003e when I didn\u0026rsquo;t apply that arbitrary constant. The \u003ca href=\"http://nshipster.com/swift-comparison-protocols/\"\u003eNSHipster article\u003c/a\u003e on the subject does not mention this, but do use the \u003ccode\u003e^\u003c/code\u003e operator.\u003c/p\u003e\n\n\u003cp\u003eMoving on. Conforming to \u003ccode\u003eHashable\u003c/code\u003e also forces us to conform to \u003ccode\u003eEquatable\u003c/code\u003e so we have to implement \u003ccode\u003e==\u003c/code\u003e for our little struct:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan class=\"c1\"\u003e// Does not have any methods \u0026quot;on it\u0026quot;.\u003c/span\u003e\n\u003cspan class=\"kd\"\u003eextension\u003c/span\u003e \u003cspan class=\"nc\"\u003eIndexPath\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nb\"\u003eEquatable\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"p\"\u003e==\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003elhs\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eIndexPath\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003erhs\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eIndexPath\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class=\"nb\"\u003eBool\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003elhs\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ehashValue\u003c/span\u003e \u003cspan class=\"p\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003erhs\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ehashValue\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003eThis is what I did first. Turns out this might also be a bad idea. Michel continued to explain:\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eTypically, the hash value is used as a first quick check for inequality. If the hash is the same it means the objects \u003cem\u003ecan\u003c/em\u003e be equal, and you then have to do a full check for equality. So it\u0026rsquo;s important for performance that hashes don\u0026rsquo;t collide too often, but it\u0026rsquo;s fine if it happens from time to time.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eThis is what the Swift documentation says about \u003ccode\u003ehashValue\u003c/code\u003e:\n\u0026gt; Axiom: x == y implies x.hashValue == y.hashValue.\n\u0026gt;\n\u0026gt; Note: The hash value is not guaranteed to be stable across different invocations of the same program. Do not persist the hash value across program runs.\u003c/p\u003e\n\n\u003cp\u003eNote the order in the axiom. Two equal objects should have the same \u003ccode\u003ehashValue\u003c/code\u003e. But the \u0026ldquo;implies\u0026rdquo; only goes one way. Two equal \u003ccode\u003ehashValue\u003c/code\u003es might not equal two equal objects. Which is why the \u003ccode\u003e==\u003c/code\u003e operator shouldn\u0026rsquo;t just do a \u003ccode\u003ehashValue\u003c/code\u003e compare, but rather a full compare \u003cem\u003eif\u003c/em\u003e the hashValues are the same. If they are not the same we can know for sure that the objects are not equal. But if the \u003ccode\u003ehashValue\u003c/code\u003es are equal we need to double check.\u003c/p\u003e\n\n\u003cp\u003eSo finally we end up with:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan class=\"kd\"\u003estruct\u003c/span\u003e \u003cspan class=\"nc\"\u003eIndexPath\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003erow\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nb\"\u003eInt\u003c/span\u003e\n  \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003ecolumn\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nb\"\u003eInt\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"kd\"\u003eextension\u003c/span\u003e \u003cspan class=\"nc\"\u003eIndexPath\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nb\"\u003eHashable\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nv\"\u003ehashValue\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nb\"\u003eInt\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003erow\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ehashValue\u003c/span\u003e \u003cspan class=\"o\"\u003e^\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecolumn\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ehashValue\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;*\u003c/span\u003e \u003cspan class=\"mi\"\u003e987654433\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"kd\"\u003eextension\u003c/span\u003e \u003cspan class=\"nc\"\u003eIndexPath\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nb\"\u003eEquatable\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"p\"\u003e==\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003elhs\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eIndexPath\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003erhs\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eIndexPath\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class=\"nb\"\u003eBool\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eguard\u003c/span\u003e \u003cspan class=\"n\"\u003elhs\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ehashValue\u003c/span\u003e \u003cspan class=\"p\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003erhs\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ehashValue\u003c/span\u003e \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"kc\"\u003efalse\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003elhs\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003erow\u003c/span\u003e \u003cspan class=\"p\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003erhs\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003erow\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003elhs\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecolumn\u003c/span\u003e \u003cspan class=\"p\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003erhs\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecolumn\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"c1\"\u003e// ----\u003c/span\u003e\n\n\u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003ea\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eIndexPath\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003erow\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ecolumn\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003eb\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eIndexPath\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003erow\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ecolumn\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e6\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003ec\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eIndexPath\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003erow\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ecolumn\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003ea\u003c/span\u003e \u003cspan class=\"p\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003eb\u003c/span\u003e \u003cspan class=\"c1\"\u003e// true\u003c/span\u003e\n\u003cspan class=\"n\"\u003ea\u003c/span\u003e \u003cspan class=\"p\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003ec\u003c/span\u003e \u003cspan class=\"c1\"\u003e// false\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003eOf course this is a bit of a contrived example that probably does not gain much from our little \u0026ldquo;performance optimization\u0026rdquo;. Might even be that Swift do the hash comparison under the hood if available, I\u0026rsquo;d be curious to know!\u003c/p\u003e\n\n\u003cp\u003eThe important part to me was the bits about \u003ccode\u003ehashValue\u003c/code\u003e computation. Getting that right is important. Because if you have to different objects that yield the same hash and then try to use them both as keys in the same dictionary you\u0026rsquo;ll get a few gray hairs. It\u0026rsquo;s errors in code like this that can lead to weird inconsistency bugs.\u003c/p\u003e\n\n\u003cp\u003eThanks to Michel and Dennis for the help! And also to \u003ca href=\"http://www.klundberg.com\"\u003eKevin Lundberg\u003c/a\u003e for weighing in!\u003c/p\u003e\n"
    }, 
    {
      "id": "https://iamsim.me/delegate-calls-wrapped-in-computed-properties/",
      "url": "https://iamsim.me/delegate-calls-wrapped-in-computed-properties/",
      "title": "Delegate calls wrapped in computed properties",
      "date_published": "2016-05-30T11:36:44+0000",
      "content_html": "\u003cp\u003eIn the app I\u0026rsquo;m currently working I have a view that asks its delegate for the locale to use when rendering it\u0026rsquo;s model object.\u003c/p\u003e\n\n\u003cp\u003eThe model has strings for all of the supported locales embeded in it and its just a matter of using the correct one when rendering.\u003c/p\u003e\n\n\u003cp\u003eThe view itself can go through a number of different transitions which is why I need to ask the delegate a few times in a few different places for what locale to use. And I also need to provide a default value in all of those places.\u003c/p\u003e\n\n\u003cp\u003eOf couse you could have a property on your view that you just set whenever the view is initialized or whenever you are given a delegate. But this might cause problems because the delegate is not set when \u003ccode\u003eawakeFromNib\u003c/code\u003e is called or what ever.\u003c/p\u003e\n\n\u003cp\u003eSo I came up with this pattern:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nv\"\u003elocale\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nb\"\u003eString\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003edelegate\u003c/span\u003e\u003cspan class=\"p\"\u003e?.\u003c/span\u003e\u003cspan class=\"n\"\u003emySpecialViewLocale\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kc\"\u003eself\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e??\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026quot;en\u0026quot;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003eWhich works great. It removes the optional from all of the other places in my view and it also allows me to set a default value in one place.\u003c/p\u003e\n\n\u003cp\u003eI elaborated a bit more on this and came up with the following gist (might not show up in RSS readers):\u003c/p\u003e\n\n\u003cscript src=\"https://gist.github.com/simme/68e8b3c5ca47e5ce42765baa1336543c.js\"\u003e\u003c/script\u003e\n\n\u003cp\u003eBasically it adds a caching mechanism to the computed property. If you know that your delegate won\u0026rsquo;t change that value during the lifetime of the object doing the delegation this might be a fine solution if you expect the delegate call to be heavy or if you\u0026rsquo;re calling it \u003cem\u003ea lot\u003c/em\u003e. But be careful about caching issues. The delegate is probably the one who \u003cem\u003eshould\u003c/em\u003e do the caching\u0026hellip;\u003c/p\u003e\n"
    }, 
    {
      "id": "https://iamsim.me/getting-rid-of-typographic-orphans-with-swift/",
      "url": "https://iamsim.me/getting-rid-of-typographic-orphans-with-swift/",
      "title": "Getting rid of typographic orphans with Swift",
      "date_published": "2016-05-20T05:30:38+0000",
      "content_html": "\u003cp\u003eI composed this little Swift string extension to get rid of typographic orphans when rendering titles and such:\u003c/p\u003e\n\n\u003cscript src=\"https://gist.github.com/simme/2fdb2f6b44c48ba3c317f8d66036ca72.js\"\u003e\u003c/script\u003e\n"
    }, 
    {
      "id": "https://iamsim.me/uistackview-left-align-without-stretching/",
      "url": "https://iamsim.me/uistackview-left-align-without-stretching/",
      "title": "UIStackView: Left align without stretching",
      "date_published": "2016-05-19T12:32:10+0000",
      "content_html": "\u003cp\u003e\u003ccode\u003eUIStackView\u003c/code\u003e introduced in iOS 9 is awesome. However, as someone coming from the HTML/CSS programming world I sometimes find that it does not \u003cem\u003ereally\u003c/em\u003e match up with the mental model I have of how it \u003cem\u003eshould\u003c/em\u003e work.\u003c/p\u003e\n\n\u003cp\u003eThere\u0026rsquo;s not any straight forward way of putting a number of absolutely sized items in a stack view and aligning them to either side. You can make them stretch to fill, distribute equally over the entire width of the stack view and you can center them. But from what I\u0026rsquo;ve found there\u0026rsquo;s not really any way to just \u0026ldquo;stack them to a side\u0026rdquo;.\u003c/p\u003e\n\n\u003cp\u003eTurns out, there is!\u003c/p\u003e\n\n\u003cp\u003eAll you need is a bit of \u003ccode\u003esetContentHuggingPriority\u003c/code\u003e and an invisible stretcher view.\u003c/p\u003e\n\n\u003cp\u003eFor each arranged subview that you want to keep to a fixed size call \u003ccode\u003e.setContentHuggingPriority(1000, forAxis: .Horizontal)\u003c/code\u003e. This will make the view resistant to stretching.\u003c/p\u003e\n\n\u003cp\u003eThen create a new invisible view that we\u0026rsquo;ll use as a \u0026ldquo;filler\u0026rdquo; for the rest of the space.\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003elet stretchingView = UIView()\nstretchingView.setContentHuggingPriority(1, forAxis: .Horizontal)\nstretchingView.backgroundColor = .clearColor()\nstretchingView.translatesAutoresizingMaskIntoConstraints = false\nrecipePropertyView.addArrangedSubview(stretchingView)\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eAs you might notice this view has a very low content hugging priority making it susceptible to stretching. You also need to make sure that your stack view\u0026rsquo;s distribution is set to \u003ccode\u003eFill\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eYou can place this stretching where ever you want. Place it first to align items to the right. Or place it in the middle to create sort of a toolbar like layout.\u003c/p\u003e\n\n\u003cp\u003eHappy stacking!\u003c/p\u003e\n"
    }, 
    {
      "id": "https://iamsim.me/live-debugging-node.js-in-vim-update/",
      "url": "https://iamsim.me/live-debugging-node.js-in-vim-update/",
      "title": "Live Debugging Node.js in Vim: update",
      "date_published": "2015-10-09T05:29:23+0000",
      "content_html": "\u003cp\u003eJust wanted to post a super quick update! Since posting my \u003ca href=\"/live-debugging-node-js-in-vim\"\u003earticle\u003c/a\u003e a few months back there\u0026rsquo;s been some activity in the repository for the \u003ca href=\"https://github.com/sidorares/node-vim-debugger\"\u003enode-vim-debugger\u003c/a\u003e!\u003c/p\u003e\n\n\u003cp\u003eLooks amazing!\u003c/p\u003e\n\n\u003cp\u003e(If I was the kind of person to take credit for stuff I\u0026rsquo;d like to imagine that I sparked the burst of development creating an issue. Luckliy I\u0026rsquo;m very humble and would never do such a thing. ;))\u003c/p\u003e\n"
    }, 
    {
      "id": "https://iamsim.me/my-r%C3%A9sum%C3%A9-or-how-i-accidentally-built-a-static-site-generator/",
      "url": "https://iamsim.me/my-r%C3%A9sum%C3%A9-or-how-i-accidentally-built-a-static-site-generator/",
      "title": "My Résumé: or How I Accidentally Built a Static Site Generator",
      "date_published": "2015-09-14T18:06:56+0000",
      "content_html": "\u003cp\u003eOne thing that I did not really realize when I started freelancing was that potentially customers sometimes asks for a résumé. I hadn\u0026rsquo;t had a résumé in over six years. And I probably only wrote one or two before that.\u003c/p\u003e\n\n\u003cp\u003eSo last week when I was approached by a company, that I really wanted to work with, asked for my résumé I sat down to write one. I opened up a new Google Docs file and started writing. After a few minutes of writing that stupid programmer\u0026rsquo;s brain of mine realized that I was spending a lot of time doing repetitive tasks like formatting dates and titles.\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eI should write this as a JSON file and let the computer style it for me!\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003e\u003ccode\u003ecmd-w\u003c/code\u003e good bye Google Docs. Fired up Vim and started typing JSON instead. But JSON is not great for typing stuff. \u003ccode\u003e/me converts file to YAML\u003c/code\u003e. Ok, got my résumé data figured out. Now what?\u003c/p\u003e\n\n\u003cp\u003eI needed to take a pile of data run it through some templating engine and present the resulting HTML. Simple enough. But.. I should probably have a special Handlebars helper to \u003ca href=\"https://github.com/simme/resume/blob/master/themes/formal/helpers/date-range.js\"\u003eformat date ranges\u003c/a\u003e. And one for \u003ca href=\"https://github.com/simme/resume/blob/master/themes/formal/helpers/md.js\"\u003econverting Markdown\u003c/a\u003e. And one for \u003ca href=\"https://github.com/simme/resume/blob/master/themes/formal/helpers/orphan-killer.js\"\u003ekilling orphans\u003c/a\u003e (I\u0026rsquo;m not a monster, talking about lonley words here. And not actually about killing them, rather giving them a friend. So I\u0026rsquo;m a kind of word hero.)\u003c/p\u003e\n\n\u003cp\u003eIt\u0026rsquo;s very tiresome to have to remember to include these new helpers every time I write a new helper.. I could probably automate this! And that\u0026rsquo;s how the \u003ca href=\"https://github.com/simme/resume/blob/master/theme.js\"\u003eTheme\u003c/a\u003e thing was born. Takes a path, loads helpers and partials at said path. Provides methods for rendering a template into HTML.\u003c/p\u003e\n\n\u003cp\u003eHm.. but now, how do I actually run this stuff? Seems like this would be a good use case for a build system. Like Gulp. A set of simple tasks for compiling CSS, minifying HTML, inlining critical CSS (which was all CSS..) and optimizing images. A \u003ca href=\"https://github.com/simme/resume/blob/master/Gulpfile.js\"\u003eGulpfile\u003c/a\u003e saw the light of day.\u003c/p\u003e\n\n\u003cp\u003eOne last thing. This HTML I now have gotta be hosted somewhere. I have this Linode. But it\u0026rsquo;s setup with Haproxy to just serve a bunch of Node.js servers. So using \u003ca href=\"https://www.npmjs.com/package/static-server\"\u003estatic server\u003c/a\u003e I cobbled together a simple script that could be run using Forever.\u003c/p\u003e\n\n\u003cp\u003eActually, \u003cstrong\u003enow the last thing\u003c/strong\u003e. Code has to move from my computer to the server. Hmm.. I guess I could just build a simple Gulp task that somehows.. moves.. hmm.. \u003cem\u003ersync\u003c/em\u003e. Let\u0026rsquo;s just use frickin\u0026rsquo; \u003cem\u003ersync\u003c/em\u003e.\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003ecp -R build/ /tmp/simonljsv\nmv /tmp/simonljsv/resume-sv.html /tmp/simonljsv/index.html\nrm /tmp/simonljsv/resume-en.html\nrsync -avz /tmp/simonljsv/ root@iamsim.me:~/simonljungberg.se/\nrm -rf /tmp/simonljsv\n\ncp -R build/ /tmp/simonljen\nmv /tmp/simonljen/resume-en.html /tmp/simonljen/index.html\nrm /tmp/simonljen/resume-sv.html\nrsync -avz /tmp/simonljen/ root@iamsim.me:~/simonljungberg.com/\nrm -rf /tmp/simonljen\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eSimple enough! Also.. that server thing is not really built for production. Not that it\u0026rsquo;ll have to withstand tons of load.. Haproxy doesn\u0026rsquo;t really do caching. So let\u0026rsquo;s put Cloud Flare in front of it. It\u0026rsquo;s free for my purposes. And wow, look at that. PageSpeed Insights are now showing 98 and 94 for mobile and desktop respectively. If it wasn\u0026rsquo;t for TypeKit and Google Analytics I\u0026rsquo;d be nailing that 100 so hard.\u003c/p\u003e\n\n\u003cp\u003eDid this make me finish the résumé faster? No. On the contrary, it took me a few nights longer then if I had just written that Google Docs. But now I have my CV datafied. Which is nice. And I also got to built a tiny personal site for myself. I\u0026rsquo;m no designer, but I think it looks ok!\u003c/p\u003e\n\n\u003cp\u003eYou can check \u0026lsquo;em out at \u003ca href=\"http://simonljungberg.se\"\u003esimonljungberg.se\u003c/a\u003e for the Swedish version and \u003ca href=\"http://simonljungberg.com\"\u003esimonljungberg.com\u003c/a\u003e for the English — not yet proof read — version!\u003c/p\u003e\n"
    }, 
    {
      "id": "https://iamsim.me/reactive-cocoa/",
      "url": "https://iamsim.me/reactive-cocoa/",
      "title": "Reactive Cocoa",
      "date_published": "2015-08-16T18:44:06+0000",
      "content_html": "\u003cp\u003eHere\u0026rsquo;s a \u003ca href=\"http://nomothetis.svbtle.com/an-introduction-to-reactivecocoa\"\u003enice article\u003c/a\u003e that explains Reactive Cocoa in a very succint way. I don\u0026rsquo;t think I\u0026rsquo;ll ever really get into this style of programming (mostly because I don\u0026rsquo;t feel super comfortable basing an app entirely on third party frameworks). But I find it really fascinating and cool!\u003c/p\u003e\n"
    }, 
    {
      "id": "https://iamsim.me/nodes-require-and-browserify-take-2/",
      "url": "https://iamsim.me/nodes-require-and-browserify-take-2/",
      "title": "Node's Require and Browserify: Take 2",
      "date_published": "2015-08-16T18:41:22+0000",
      "content_html": "\u003cp\u003eA while back I wrote about \u003ca href=\"http://iamsim.me/taking-advantage-of-nodes-require-algorithm-with-browserify/\"\u003etaking advantage of Node\u0026rsquo;s require algorithm with Browserify\u003c/a\u003e. While I liked the concept of doing that I never really liked how it made things look file-wise.\u003c/p\u003e\n\n\u003cp\u003eWell. Turns out you don\u0026rsquo;t need to wrap your little module in a directory or give it a package.json!\u003c/p\u003e\n\n\u003cp\u003eSay you have a module called\u0026hellip; let\u0026rsquo;s say \u003ccode\u003edo-some-math\u003c/code\u003e that exports some fancy math functions that are unique do your project. If you followed my previous article you\u0026rsquo;d end up with a folder called \u003ccode\u003edo-some-math\u003c/code\u003e in your \u0026ldquo;custom\u0026rdquo; \u003ccode\u003enode_modules\u003c/code\u003e folder. Your module folder would contain at least one JavaScript file and a package.json. Once you\u0026rsquo;ve accumulated a bunch of modules this ends up being many files and folders that don\u0026rsquo;t really serve any purpose.\u003c/p\u003e\n\n\u003cp\u003eSo, what you \u003cem\u003eactually\u003c/em\u003e can do is to just have a file called \u003ccode\u003edo-some-math.js\u003c/code\u003e in your \u0026ldquo;custom\u0026rdquo; \u003ccode\u003enode_modules\u003c/code\u003e folder. And that\u0026rsquo;s it.\u003c/p\u003e\n\n\u003cp\u003eNow, I haven\u0026rsquo;t experimented too much with this yet. But for stuff like views that (in my case) requires the module to explicitly state Browserify transform in their package.json (since Browserify does not apply transforms to \u0026ldquo;external\u0026rdquo; modules) this will not work.\u003c/p\u003e\n\n\u003cp\u003eI\u0026rsquo;m just getting back into some more \u0026ldquo;heavy\u0026rdquo; client side app-stuff after a while mostly hacking on iOS stuff. So we\u0026rsquo;ll see how this turns out!\u003c/p\u003e\n"
    }, 
    {
      "id": "https://iamsim.me/my-watch-and-i/",
      "url": "https://iamsim.me/my-watch-and-i/",
      "title": "My Watch and I",
      "date_published": "2015-08-14T05:15:26+0000",
      "content_html": "\u003cp\u003eThis started out as a 700+ word review of the Apple Watch. Then I read it and realized that I was just repeating what everyone else have already said about it. So, I threw it away. What remains is a short list of observations, still mostly echoing others.\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eThe try-on experience in the store was weird, but kind of fun.\u003c/li\u003e\n\u003cli\u003eI went with the classic leather buckle. Comfort wise it\u0026rsquo;s comparable to the black sportband (which I also got). But I think the leather looks nicer.\u003c/li\u003e\n\u003cli\u003eThe Milanese loop (which I tried in the store) was comfy, but pulled my arm hairs.\u003c/li\u003e\n\u003cli\u003eI went in thinking I\u0026rsquo;d really want to buy the link bracelet (even though it was out of budget for me) but after trying it on I really didn\u0026rsquo;t like the feel against my skin.\u003c/li\u003e\n\u003cli\u003eThe watch has absolutely motivated me to move more and get some exercise. A slave to the circles.\u003c/li\u003e\n\u003cli\u003eApps are really slow, I really don\u0026rsquo;t use them. watchOS 2 hopefully fixes this.\u003c/li\u003e\n\u003cli\u003eGoing for a run without the phone but still getting stats is \u003cem\u003ereally nice\u003c/em\u003e.\u003c/li\u003e\n\u003cli\u003eI\u0026rsquo;m spending less time overall with my phone since I can triage most notifications from my wrist. And also I trust myself to notice notifications on the watch. On the phone it\u0026rsquo;s so easy to miss things, which leads to some kind of angst that makes me pull it out of the pocket all the time. And once it\u0026rsquo;s up it\u0026rsquo;s so easy to get stuck on Instagram, Twitter or Facebook. That just doesn\u0026rsquo;t happen in the same way anymore.\u003c/li\u003e\n\u003cli\u003eI use the \u0026ldquo;Now Playing\u0026rdquo;-glance \u003cem\u003eall the time\u003c/em\u003e. Being an avid podcast listener, mostly from the speaker in my pocket while out working on the farm, it is really useful. (I sometimes pause podcasts using my nose.. :S)\u003c/li\u003e\n\u003cli\u003eIt\u0026rsquo;s my new alarm clock on my bedside table (replacing the phone which is now not in the bedroom during the night). For no particular reason.\u003c/li\u003e\n\u003cli\u003eSiri works really well most of the time and I actually use it to set reminders, timers, call people and text people.\u003c/li\u003e\n\u003cli\u003eBattery life is really a non-issue. I don\u0026rsquo;t think I\u0026rsquo;ve gone one day where it was below 30% when I went to bed.\u003c/li\u003e\n\u003cli\u003eIt has revolutionized nothing, but changed my life in so many tiny ways that it\u0026rsquo;s now very annoying to not have it on.\u003c/li\u003e\n\u003c/ul\u003e\n"
    }, 
    {
      "id": "https://iamsim.me/uistackview-and-autolayout/",
      "url": "https://iamsim.me/uistackview-and-autolayout/",
      "title": "UIStackView and Autolayout",
      "date_published": "2015-07-31T19:36:20+0000",
      "content_html": "\u003cp\u003eWas about to tear my own hair off due to issue with \u003ccode\u003eUIStackView\u003c/code\u003e and autolayout. Here\u0026rsquo;s a simplified version of my view hierarchy:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003e- UIStackView\n  - MyCustomView\n    - UILabel\n  - MyCustomView\n    - UILabel\n  - MyCustomView\n    - UILabel\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eThe stack view are laying the custom views out in a horizontal fashion. Now, whenever I added a constraint similar to this:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003elet xConstraint = NSLayoutConstraint(item: label,\n  attribute: .Left,\n  relatedBy: .Equal,\n  toItem: self,\n  attribute: .Left,\n  multiplier: 1.0,\n  constant: 20)\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eto my custom view (where \u003ccode\u003eself\u003c/code\u003e in this case is the custom view) would make the stack view shift all content way off to the left.\u003c/p\u003e\n\n\u003cp\u003eTook a while to figure out that the reason for this was a line that I automatically add to all of my views as soon as I need to do some programmatic autolayouting:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003eself.translatesAutoresizingMaskIntoConstraints = false\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eIe, I was disabling autoresize mask translation for my custom view. Turns out the stack views are somehow making use of those.. I guess?\u003c/p\u003e\n"
    }, 
    {
      "id": "https://iamsim.me/ios-storyboard-tips--tricks/",
      "url": "https://iamsim.me/ios-storyboard-tips--tricks/",
      "title": "iOS Storyboard Tips \u0026 Tricks",
      "date_published": "2015-05-08T19:46:22+0000",
      "content_html": "\n\n\u003cp\u003eI\u0026rsquo;ve been spending some time diving into iOS development for reals during my spare time the last couple of months. In this time I\u0026rsquo;ve come to learn a lot of things about storyboards, other than that they are pretty awesome.\u003c/p\u003e\n\n\u003cp\u003eHere are two things in particular.\u003c/p\u003e\n\n\u003ch2 id=\"table-view-data-sources-and-delegates\"\u003eTable View Data Sources and Delegates\u003c/h2\u003e\n\n\u003cp\u003eIn the very \u003ca href=\"http://www.objc.io/issue-1/index.html\"\u003efirst issue\u003c/a\u003e of \u003ca href=\"http://objc.io\"\u003eobjc.io\u003c/a\u003e they discuss how to make your \u003ccode\u003eUITableViewControllers\u003c/code\u003e \u003ca href=\"http://www.objc.io/issue-1/lighter-view-controllers.html\"\u003elighter\u003c/a\u003e by moving data sources and delegates to separate objects. Turns out you can achieve this with storyboards — without the need to create a custom table view controller subclass!\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003eIn Interface Builder search for \u003ccode\u003eObject\u003c/code\u003e in the \u003cem\u003eObject Library\u003c/em\u003e (lower right).\u003c/li\u003e\n\u003cli\u003eHit \u003ccode\u003eReturn\u003c/code\u003e or drag the \u003ccode\u003eObject\u003c/code\u003e to your table view.\u003c/li\u003e\n\u003cli\u003eIf it\u0026rsquo;s not automatically selected, seletect the \u003ccode\u003eObject\u003c/code\u003e and open up the \u003cem\u003eIdentity Inspector\u003c/em\u003e.\u003c/li\u003e\n\u003cli\u003eIn the section \u003ccode\u003eCustom Class\u003c/code\u003e enter the name of your custom data source class.\u003c/li\u003e\n\u003cli\u003eControl drag from the table view to your data source object, select \u003ccode\u003edata source\u003c/code\u003e from the popup menu.\u003c/li\u003e\n\u003cli\u003eYou\u0026rsquo;re done!\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eBy hooking things up this way I\u0026rsquo;ve come along way without creating a ton of custom controllers just to create my data sources.\u003c/p\u003e\n\n\u003ch2 id=\"the-exit-unwind-segue\"\u003eThe Exit/Unwind Segue\u003c/h2\u003e\n\n\u003cp\u003eYou probably know this already if you\u0026rsquo;ve ever done anything with storyboards, but it was news to me.\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003eImplement a method in a view controller (any view controller — I think) with the following signature \u003ccode\u003efunc myUnwindSegue(segue: UIStoryboardSegue)\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003eControl drag from any button to the \u003ccode\u003eExit\u003c/code\u003e icon on your \u003cem\u003ecurrent\u003c/em\u003e view and select the method you want to \u0026ldquo;unwind\u0026rdquo; to.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eWhenever your button is tapped the current view controller will be dimissed if it was presented modally or popped from the navigation stack if it\u0026rsquo;s contained in a navigation controller. Basically it\u0026rsquo;ll do the right thing to go back to the view controller implementing the method. If the destination view controller cannot be unwound to, because it\u0026rsquo;s not in the navigation stack or something, the button will do nothing (I think).\u003c/p\u003e\n\n\u003cp\u003eNow, any function with the above signature will show up in the list of available ones. So first of all, if you have lots of view controllers you want to unwind to you probably want to name your methods in a unique way, and not just \u003ccode\u003eback\u003c/code\u003e. Maybe \u003ccode\u003ereturnToListOfThings\u003c/code\u003e or \u003ccode\u003esaveThisThing\u003c/code\u003e.\u003c/p\u003e\n"
    }, 
    {
      "id": "https://iamsim.me/mac-app-of-the-week/",
      "url": "https://iamsim.me/mac-app-of-the-week/",
      "title": "Mac App of the Week",
      "date_published": "2015-04-20T17:43:40+0000",
      "content_html": "\u003cp\u003eMy \u0026ldquo;Mac App of the Week\u0026rdquo;-award (not actually a weekly occurence) goes to \u003ca href=\"https://luckymarmot.com/paw\"\u003ePaw\u003c/a\u003e! Paw makes it super easy to try and debug web APIs!\u003c/p\u003e\n\n\u003cp\u003eYou can save requests, group them, edit JSON in a nice way, easily exclude keys from JSON POST calls, view responses in different format, extend functionality with JavaScript. The list goes on.\u003c/p\u003e\n\n\u003cp\u003eIf you\u0026rsquo;ve ever used Postman for Chrome or if you\u0026rsquo;re hacking away in your terminal with Curl, give Paw a go. There\u0026rsquo;s a thirty day trial with no locked down functionality so there\u0026rsquo;s nothing to lose. For $30 it\u0026rsquo;s a steal!\u003c/p\u003e\n"
    }, 
    {
      "id": "https://iamsim.me/the-trello-css-guide/",
      "url": "https://iamsim.me/the-trello-css-guide/",
      "title": "The Trello CSS Guide",
      "date_published": "2015-04-18T17:44:47+0000",
      "content_html": "\u003cp\u003eA while back I saw the \u003ca href=\"https://gist.github.com/bobbygrace/9e961e8982f42eb91b80\"\u003eTrello CSS Guide\u003c/a\u003e swim around my Twitter timeline. I\u0026rsquo;ve been using that style of writing CSS ever since, I\u0026rsquo;ve even started to introduce it ever so slightly in the Bloglovin CSS (although converting a two year old project is not something you do in one go). I\u0026rsquo;ve found the guide to result in \u003cem\u003every\u003c/em\u003e maintainable CSS code. It\u0026rsquo;s even possible to make changes without being scared of breaking stuff, because it\u0026rsquo;s all so neatly namespaced.\u003c/p\u003e\n\n\u003cp\u003eEnd of message.\u003c/p\u003e\n"
    }
  ]
}
